# List comprehension:

import random

# my_list = [i for i in range(10)]
# print(my_list)
# # ----------------------------------------------------------------------------------------------------------------

# my_list = [random.randint(0,100) for _ in range(10)]
# print(my_list)

# ==================================================================================================================

# map:     -функция, которая заставляет функцию(другую) примениться к каждому элементу списка

# string = '123 4324 42 524 52431 5242 521 1123 22 4'
# my_list = string.split()
# print(my_list)
#
# my_list = list(map(int, my_list))
# my_list = [i+10 for i in my_list]
# print(my_list)

# ==================================================================================================================
# filter:   применяет фильтр к каждому элементу списка

# string = '123 4324 42 524 52431 5242 521 1123 22 4'
# my_list = string.split()
# print(my_list)
#
#
# def func(x: int):
#     if x % 2 == 0:
#         return x
#
#
# my_list = list(map(int, my_list))
# my_list = list(filter(func, my_list))
# print(my_list)
# ==================================================================================================================
# enumerate: пронумеровывает список

# string = '123 4324 42 524 52431 5242 521 1123 22 4'
# my_list = string.split()
# print(my_list)
#
# for i, k in enumerate(my_list):
#     print(i, k)

# ==================================================================================================================
# zip - объединяет несколько списков построчно

# string = '123 4324 42 524 52431 5242 521 1123 22 4'
# numbers = [234, 52, 51, 63, 1, 65, 6, 523, 2, 15]
# my_list = string.split()
# print(my_list)
# print(numbers)
# new_list = list(zip(my_list, numbers))
# print(new_list)
# ==================================================================================================================
# lambda: анонимная однострочная функция, которая что-то возвращает

# string = '123 4324 42 524 52431 5242 521 1123 22 4'
# my_list = string.split()
# print(my_list)
#
# new_list = list(map(lambda x: int(x) + 2, my_list))
#
# print(new_list)
#
# operation = {'+': lambda x, y: x + y,
#              '-': lambda x, y: x - y,
#              '*': lambda x, y: x * y,
#              '/': lambda x, y: x / y}
#
# print(operation.get('+')(3, 4))
# ==================================================================================================================
# ЗАДАЧА: У вас есть код, который вы не можете менять(так часто бывает, когда код в глубине используется множество
# раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7,11 ,13 ,17 ,19 ,23 ,29]
# transformaed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции  transformation. Однако
# вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, а нужно получить его
# как есть.
# Напишите накое лямбда-выражение transformation, чтобы transformaed_values получился копией values.

# transformation = lambda x: x
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
# transformaed_values = list(map(transformation, values))
# print(values)
# print(transformaed_values)

# ==================================================================================================================
# ЗАДАЧА: Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь.
# Напишите функцию find_farthest_orbit(list_of_orbits),
# которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета.
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет,
# зато искусственные спутники были запущены на круговые орбиты.
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты.
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса.
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса.
# При решении задачи используйте списочные выражения.
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса,
# а затем найти и сам эллипс, имеющий такую площадь.
# Гарантируется, что самая далекая планета ровно одна

import math

list_of_orbits = [(3, 5), (5, 6), (7, 8)]
print(list_of_orbits)


def find_farthest_orbit(list_of_orbits):
    new_list = []
    for i, j in list_of_orbits:
        new_list.append(math.pi * i * j)
    print(new_list)


print(find_farthest_orbit(list_of_orbits))
list_of_orbits.sort()
print(f'Самая большая орбита {list_of_orbits[-1]}')
